# -*- cperl -*-

# Macros for TrEd for annotating sentiment.
# Miroslav Tynovsky, surname at ufal.mff.cuni.cz
# Jan Masek, honza (dot) masek (at) gmail (dot) com

{

package PML_T_Sentiment;
BEGIN { import NonDepRel_Common; import TredMacro; }
#binding-context PML_T_Sentiment

#include <contrib/support/unbind_edit.inc>

#include <contrib/support/arrows.inc>
#include <contrib/pml/PML.mak>

use strict;
use warnings;
no warnings qw(redefine);

use vars qw($this $root $grp);

unshift @TredMacro::AUTO_CONTEXT_GUESSING, sub {
  my ($hook) = @_;
  my $resuming = ($hook eq 'file_resumed_hook');
  my $current = CurrentContext();
  if ( (FileMetaData('schema-url') || '') =~ /tdata_schema_sentiment\.xml/ ) {
    SetCurrentStylesheet('PML_T_Sentiment') if $resuming;
    return 'PML_T_Sentiment';
  }
  return;
};


# sub root_style_hook {
#     DrawArrows_init();
# }

# sub after_redraw_hook {
#     DrawArrows_cleanup();
# }

# sub node_style_hook {
#     my ($node,$styles) = @_;
#     DrawArrows($node,$styles,
#                [ {
#                    # an arrow with a target
#                    -target => PML::GetNodeByID($node->{ref}),
#                    # other options: -tag -arrow -arrowshape -width -smooth -fill -dash
#                },
#                  {
#                      # an arrow without a target
#                      -deltax => 10,
#                      -deltay => '(yn-yp)/2',
#                      # ...
#                  },
#                  {
#                      # an arrow with modified origin
#                      -originx => 'xn+10',
#                      -originy => 'yn+10',
#                      # ...
#                  },
#              ],
#                {
#                    # options common to all edges
#                });
# }


#sub file_opened_hook {
#  return unless CurrentFile();
  # print STDERR "file opened hook\n";
#  initialize_file_related_resources({
#    'sentiment' => 1,
#  });
#  precompute_file_related_resources({
# 'sentiment' => 1,
#  });
#}

#sub file_reloaded_hook {
#  return unless CurrentFile();
  # print STDERR "file opened hook\n";
#  initialize_file_related_resources({
#    'sentiment' => 1,
#  });
#  precompute_file_related_resources({
# 'sentiment' => 1,
#  });
#}

#bind switch_remember_only_actual_node to space menu Remember/forget node
sub switch_remember_only_actual_node {  
  forget_all_remembered_nodes();
  switch_remember_actual_node();
}

#bind init_schema_sentiment to i menu Init sentiment attributes
# should not be necessary if init_sentiment.btred had been run
sub init_schema_sentiment {
  return unless CurrentFile();
  if (FileMetaData('schema-url') !~ /tdata_schema_sentiment\.xml/) {
    FileMetaData('schema-url','tdata_schema_sentiment.xml'); # set schema
    CurrentFile()->notSaved(1); # make sure TrEd asks to save the file
    ReloadCurrentFile(); # reload the file with the new schema
  }
  ChangingFile(0);
}

#bind anotate_sentiment_source to s menu Anotate sentiment source
sub anotate_sentiment_source {
  print STDERR "anotate_sentiment_source\n";
  my $ref_remembered_nodes = FileUserData('remembered_nodes');
  if ($ref_remembered_nodes) {
    my $judge_node = $ref_remembered_nodes->[0];
    $judge_node->{'sentiment'}{'sentiment_source'} = List({ 'sentiment_source.rf' => $this->{id}, is_external => '' });
  }
}

#bind anotate_sentiment_target to t menu Anotate sentiment target
sub anotate_sentiment_target {
  print STDERR "anotate_sentiment_target\n";
  my $ref_remembered_nodes = FileUserData('remembered_nodes');
  if ($ref_remembered_nodes) {
    my $judge_node = $ref_remembered_nodes->[0];
    $judge_node->{'sentiment'}{'sentiment_target'} = List({ 'sentiment_target.rf' => $this->{id}, is_external => '' });
  }
}

#bind set_sentiment_positive to p menu Set sentiment value to positive
sub set_sentiment_positive {
  print STDERR "set_sentiment_positive\n";
  $this->{'sentiment'}{'sentiment_eval'} = 'positive';
  $this->{'sentiment'}{'was_annotated'} = 1;
}

#bind set_sentiment_negative to n menu Set sentiment value to negative
sub set_sentiment_negative {
  print STDERR "set_sentiment_positive\n";
  $this->{sentiment}{sentiment_eval} = 'negative';
  $this->{'sentiment'}{'was_annotated'} = 1;
}

#bind remove_sentiment to r menu Remove sentiment from current node
sub remove_sentiment {
  print STDERR "remove_sentiment\n";
  $this->{'sentiment'}{'sentiment_eval'} = '';
  $this->{'sentiment'}{'sentiment_source'} = List({ 'sentiment_source.rf' => '', is_external => '' });
  $this->{'sentiment'}{'sentiment_target'} = List({ 'sentiment_target.rf' => '', is_external => '' });
  $this->{'sentiment'}{'was_annotated'} = 1;
}

} # package
