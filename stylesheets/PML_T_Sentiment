context: PML.*_T.*
rootstyle: #{NodeLabel-skipempty:1}
node:<? '#{customparenthesis}' if $${is_parenthesis}
  ?><? $${nodetype}eq'root' ? '${id}' : '${t_lemma}'
  ?><? '#{customdetail}.${sentmod}'if$${sentmod}
  ?><? '#{customcoref}'.$PML_T::coreflemmas_hash{$${id}}
    if $PML_T::coreflemmas_hash{$${id}}ne'' ?>
node:<?
  ($${nodetype} eq 'root' ? '#{customnodetype}${nodetype}' :
  '#{customfunc}${functor}').
  "#{customsubfunc}".($${subfunctor}?".\${subfunctor}":'').($${is_state}?".\${is_state=state}":'') ?>
node:<? $PML_T::showANodes
        ? (($this->attr('a/lex.rf')
            ? ('#{customlex}'
              .(PML_T::GetANodeByID($this->attr('a/lex.rf'))->attr('m/form')))
            : ''
          ).($this->attr('a/aux.rf')
            ? ('#{customaux} '
              .join(' ',map{
                  PML_T::GetANodeByID($_)->attr('m/form')
                }ListV($this->attr('a/aux.rf'))
              ))
            : ''))
        : (
          ($${nodetype} ne 'complex' and $${nodetype} ne 'root')
          ? '#{customnodetype}${nodetype}'
          : '#{customcomplex}${gram/sempos}'
        )
?>
style:#{Node-width:7}#{Node-height:7}#{Node-currentwidth:9}#{Node-currentheight:9}
style:<? '#{Node-shape:'.($this->{is_generated}?'rectangle':'oval').'}'?>
style:<? exists $PML_T::show{$${id}} ?'#{Node-addwidth:10}#{Node-addheight:10}':''?>
style:<?
  if(($this->{functor}=~/^(?:PAR|PARTL|VOCAT|RHEM|CM|FPHR|PREC)$/) or
     ($this->parent and $this->parent->{nodetype}eq'root')) {
     '#{Line-width:1}#{Line-dash:2,4}#{Line-fill:'.CustomColor('line_normal').'}'
  } elsif ($${is_member}) {
    if (PML_T::IsCoord($this)and PML_T::IsCoord($this->parent)) {
      '#{Line-width:1}#{Line-fill:'.CustomColor('line_member').'}'
    } elsif ($this->parent and PML_T::IsCoord($this->parent)) {
      '#{Line-coords:n,n,(n+p)/2,(n+p)/2&(n+p)/2,(n+p)/2,p,p}#{Line-width:3&1}#{Line-fill:'.
       CustomColor('line_normal').'&'.CustomColor('line_member').'}'
    } else {
      '#{Line-fill:'.CustomColor('error').'}'
    }
  } elsif ($this->parent and PML_T::IsCoord($this->parent)) {
    '#{Line-width:1}#{Line-fill:'.CustomColor('line_comm').'}'
  } elsif (PML_T::IsCoord($this)) {
    '#{Line-coords:n,n,(n+p)/2,(n+p)/2&(n+p)/2,(n+p)/2,p,p}#{Line-width:1&3}#{Line-fill:'.
    CustomColor('line_member').'&'.CustomColor('line_normal').'}'
  } else {
    '#{Line-width:2}#{Line-fill:'.CustomColor('line_normal').'}'
  }
?>
style:<?
  if ($${tfa}=~/^[tfc]$/) {
    '#{Oval-fill:'.CustomColor('tfa_'.$${tfa}).'}${tfa}.'
  } else {
    '#{Oval-fill:'.CustomColor('tfa_no').'}'
  }
?>#{CurrentOval-width:3}#{CurrentOval-outline:<? CustomColor('current') ?>}
style:<?
  if ($this->attr('sentiment/sentiment_eval') eq 'positive') {
    if ($this->attr('sentiment/sentiment_annotated')) {
      '#{Oval-fill:'.'#00C000'.'}'
    }
    else {
    '#{Oval-fill:'.'#40FF40'.'}'
    }
  }
  elsif ($this->attr('sentiment/sentiment_eval') eq 'negative') {
    if ($this->attr('sentiment/sentiment_annotated')) {
      '#{Oval-fill:'.'#C00000'.'}'
    }
    else {
    '#{Oval-fill:'.'#FF4040'.'}'
    }
  }
?>


hint:<?
   my @hintlines;
   if (ref($this->{gram})) {
     foreach my $gram (sort keys %{$this->{gram}}) {
       push @hintlines, "gram/".$gram." : ".$this->{gram}->{$gram} if $this->{gram}->{$gram}
     }
   }
   push@hintlines, "is_dsp_root : 1" if $${is_dsp_root};
   push@hintlines, "is_name_of_person : 1" if $${is_name_of_person};
   push@hintlines, "quot : ". join(",",map{$_->{type}}ListV($this->{quot})) if $${quot};
   join"\n", @hintlines
?>